// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.kotlin.swift_modules.location.Address in swift_module_location.proto
import Wire

/**
 * This message exists in both this file and swift_module_address.proto in order to verify
 * correct disambiguation logic.
 */
public struct Address {

    @ProtoDefaulted
    public var street_1: String?
    public var unknownFields: UnknownFields = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension Address : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension Address : Hashable {
}
#endif

extension Address : Sendable {
}

extension Address : ProtoDefaultedValue {

    public static var defaultedValue: Self {
        .init()
    }
}

extension Address : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/squareup.protos.kotlin.swift_modules.location.Address"
    }

}

extension Address : Proto2Codable {

    public init(from protoReader: ProtoReader) throws {
        var street_1: String? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: street_1 = try protoReader.decode(String.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self._street_1.wrappedValue = street_1
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.street_1)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension Address : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self._street_1.wrappedValue = try container.decodeIfPresent(String.self, firstOfKeys: "street1", "street_1")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let preferCamelCase = encoder.protoKeyNameEncodingStrategy == .camelCase

        try container.encodeIfPresent(self.street_1, forKey: preferCamelCase ? "street1" : "street_1")
    }

}
#endif
